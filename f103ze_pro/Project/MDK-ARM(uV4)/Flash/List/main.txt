; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=531 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;237    */
;;;238    static void AppTaskCreate (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;239    {
;;;240        xTaskCreate( vTaskTaskUserIF,   	/* 任务函数  */
000002  2000              MOVS     r0,#0
000004  4a1b              LDR      r2,|L1.116|
000006  2301              MOVS     r3,#1
000008  e9cd2001          STRD     r2,r0,[sp,#4]
00000c  9300              STR      r3,[sp,#0]
00000e  9003              STR      r0,[sp,#0xc]
000010  4603              MOV      r3,r0
000012  f44f7200          MOV      r2,#0x200
000016  a118              ADR      r1,|L1.120|
000018  481a              LDR      r0,|L1.132|
00001a  f7fffffe          BL       xTaskGenericCreate
;;;241                     "vTaskUserIF",     	/* 任务名    */
;;;242                     512,               	/* 任务栈大小，单位word，也就是4字节 */
;;;243                     NULL,              	/* 任务参数  */
;;;244                     1,                 	/* 任务优先级*/
;;;245                     &xHandleTaskUserIF );  /* 任务句柄  */
;;;246    	
;;;247    	
;;;248    	xTaskCreate( vTaskLED,    		/* 任务函数  */
00001e  2000              MOVS     r0,#0
000020  4a19              LDR      r2,|L1.136|
000022  2302              MOVS     r3,#2
000024  e9cd2001          STRD     r2,r0,[sp,#4]
000028  9300              STR      r3,[sp,#0]
00002a  9003              STR      r0,[sp,#0xc]
00002c  4603              MOV      r3,r0
00002e  f44f7200          MOV      r2,#0x200
000032  a116              ADR      r1,|L1.140|
000034  4818              LDR      r0,|L1.152|
000036  f7fffffe          BL       xTaskGenericCreate
;;;249                     "vTaskLED",  		/* 任务名    */
;;;250                     512,         		/* 任务栈大小，单位word，也就是4字节 */
;;;251                     NULL,        		/* 任务参数  */
;;;252                     2,           		/* 任务优先级*/
;;;253                     &xHandleTaskLED ); /* 任务句柄  */
;;;254    	
;;;255    	xTaskCreate( vTaskMsgPro,     		/* 任务函数  */
00003a  2000              MOVS     r0,#0
00003c  4a17              LDR      r2,|L1.156|
00003e  2303              MOVS     r3,#3
000040  e9cd2001          STRD     r2,r0,[sp,#4]
000044  9300              STR      r3,[sp,#0]
000046  9003              STR      r0,[sp,#0xc]
000048  4603              MOV      r3,r0
00004a  f44f7200          MOV      r2,#0x200
00004e  a114              ADR      r1,|L1.160|
000050  4816              LDR      r0,|L1.172|
000052  f7fffffe          BL       xTaskGenericCreate
;;;256                     "vTaskMsgPro",   		/* 任务名    */
;;;257                     512,             		/* 任务栈大小，单位word，也就是4字节 */
;;;258                     NULL,           		/* 任务参数  */
;;;259                     3,               		/* 任务优先级*/
;;;260                     &xHandleTaskMsgPro );  /* 任务句柄  */
;;;261    	
;;;262    	
;;;263    	xTaskCreate( vTaskStart,     		/* 任务函数  */
000056  2000              MOVS     r0,#0
000058  4a15              LDR      r2,|L1.176|
00005a  2304              MOVS     r3,#4
00005c  e9cd2001          STRD     r2,r0,[sp,#4]
000060  9300              STR      r3,[sp,#0]
000062  9003              STR      r0,[sp,#0xc]
000064  4603              MOV      r3,r0
000066  f44f7200          MOV      r2,#0x200
00006a  a112              ADR      r1,|L1.180|
00006c  4814              LDR      r0,|L1.192|
00006e  f7fffffe          BL       xTaskGenericCreate
;;;264                     "vTaskStart",   		/* 任务名    */
;;;265                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;266                     NULL,           		/* 任务参数  */
;;;267                     4,              		/* 任务优先级*/
;;;268                     &xHandleTaskStart );   /* 任务句柄  */
;;;269    }
000072  bd1f              POP      {r0-r4,pc}
;;;270    
                          ENDP

                  |L1.116|
                          DCD      xHandleTaskUserIF
                  |L1.120|
000078  76546173          DCB      "vTaskUserIF",0
00007c  6b557365
000080  72494600
                  |L1.132|
                          DCD      vTaskTaskUserIF
                  |L1.136|
                          DCD      xHandleTaskLED
                  |L1.140|
00008c  76546173          DCB      "vTaskLED",0
000090  6b4c4544
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L1.152|
                          DCD      vTaskLED
                  |L1.156|
                          DCD      xHandleTaskMsgPro
                  |L1.160|
0000a0  76546173          DCB      "vTaskMsgPro",0
0000a4  6b4d7367
0000a8  50726f00
                  |L1.172|
                          DCD      vTaskMsgPro
                  |L1.176|
                          DCD      xHandleTaskStart
                  |L1.180|
0000b4  76546173          DCB      "vTaskStart",0
0000b8  6b537461
0000bc  727400  
0000bf  00                DCB      0
                  |L1.192|
                          DCD      vTaskStart

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;93     */
;;;94     int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;95     {
;;;96     	/* 
;;;97     	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;98     	  这样做的好处是：
;;;99     	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;100    	  2. 保证系统正常启动，不受别的中断影响。
;;;101    	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;102    	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;103    	  和cpsie i是等效的。
;;;104         */
;;;105    	__set_PRIMASK(1);  
;;;106    	
;;;107    	/* 硬件初始化 */
;;;108    	bsp_Init(); 
000008  f7fffffe          BL       bsp_Init
;;;109    	
;;;110    	/* 1. 初始化一个定时器中断，精度高于滴答定时器中断，这样才可以获得准确的系统信息 仅供调试目的，实际项
;;;111    		  目中不要使用，因为这个功能比较影响系统实时性。
;;;112    	   2. 为了正确获取FreeRTOS的调试信息，可以考虑将上面的关闭中断指令__set_PRIMASK(1); 注释掉。 
;;;113    	*/
;;;114    	vSetupSysInfoTest();
00000c  f7fffffe          BL       vSetupSysInfoTest
;;;115    	
;;;116    	/* 创建任务 */
;;;117    	AppTaskCreate();
000010  f7fffffe          BL       AppTaskCreate
;;;118    	
;;;119        /* 启动调度，开始执行任务 */
;;;120        vTaskStartScheduler();
000014  f7fffffe          BL       vTaskStartScheduler
;;;121    
;;;122    	/* 
;;;123    	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;124    	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;125    	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;126    	*/
;;;127    	while(1);
000018  bf00              NOP      
                  |L2.26|
00001a  e7fe              B        |L2.26|
;;;128    }
;;;129    
                          ENDP


                          AREA ||i.vTaskLED||, CODE, READONLY, ALIGN=1

                  vTaskLED PROC
;;;182    */
;;;183    static void vTaskLED(void *pvParameters)
000000  e005              B        |L3.14|
                  |L3.2|
;;;184    {
;;;185        while(1)
;;;186        {
;;;187    		bsp_LedToggle(2);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       bsp_LedToggle
;;;188            vTaskDelay(200);
000008  20c8              MOVS     r0,#0xc8
00000a  f7fffffe          BL       vTaskDelay
                  |L3.14|
00000e  e7f8              B        |L3.2|
;;;189        }
;;;190    }
;;;191    
                          ENDP


                          AREA ||i.vTaskMsgPro||, CODE, READONLY, ALIGN=1

                  vTaskMsgPro PROC
;;;200    */
;;;201    static void vTaskMsgPro(void *pvParameters)
000000  e006              B        |L4.16|
                  |L4.2|
;;;202    {
;;;203        while(1)
;;;204        {
;;;205    		bsp_LedToggle(3);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       bsp_LedToggle
;;;206            vTaskDelay(300);
000008  f44f7096          MOV      r0,#0x12c
00000c  f7fffffe          BL       vTaskDelay
                  |L4.16|
000010  e7f7              B        |L4.2|
;;;207        }
;;;208    }
;;;209    
                          ENDP


                          AREA ||i.vTaskStart||, CODE, READONLY, ALIGN=2

                  vTaskStart PROC
;;;218    */
;;;219    static void vTaskStart(void *pvParameters)
000000  e006              B        |L5.16|
                  |L5.2|
;;;220    {
;;;221        while(1)
;;;222        {
;;;223    		/* 按键扫描 */
;;;224    		// bsp_KeyScan();
;;;225            vTaskDelay(1000);
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
;;;226    		printf("hello world 123456\r\n");
00000a  a002              ADR      r0,|L5.20|
00000c  f7fffffe          BL       __2printf
                  |L5.16|
000010  e7f7              B        |L5.2|
;;;227        }
;;;228    }
;;;229    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
000014  68656c6c          DCB      "hello world 123456\r\n",0
000018  6f20776f
00001c  726c6420
000020  31323334
000024  35360d0a
000028  00      
000029  00                DCB      0
00002a  00                DCB      0
00002b  00                DCB      0

                          AREA ||i.vTaskTaskUserIF||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  vTaskTaskUserIF PROC
;;;138    */
;;;139    static void vTaskTaskUserIF(void *pvParameters)
000000  b0fe              SUB      sp,sp,#0x1f8
;;;140    {
;;;141    	uint8_t ucKeyCode;
;;;142    	uint8_t pcWriteBuffer[500];
;;;143    
;;;144        while(1)
000002  e023              B        |L6.76|
                  |L6.4|
;;;145        {
;;;146    		ucKeyCode = bsp_GetKey();
000004  f7fffffe          BL       bsp_GetKey
000008  4604              MOV      r4,r0
;;;147    		
;;;148    		if (ucKeyCode != KEY_NONE)
00000a  2c00              CMP      r4,#0
00000c  d01b              BEQ      |L6.70|
;;;149    		{
;;;150    			switch (ucKeyCode)
00000e  2c01              CMP      r4,#1
000010  d117              BNE      |L6.66|
;;;151    			{
;;;152    				/* K1键按下 打印任务执行情况 */
;;;153    				case KEY_DOWN_K1:			 
;;;154    					printf("=================================================\r\n");
000012  a00f              ADR      r0,|L6.80|
000014  f7fffffe          BL       __2printf
;;;155    					printf("任务名      任务状态 优先级   剩余栈 任务序号\r\n");
000018  a01a              ADR      r0,|L6.132|
00001a  f7fffffe          BL       __2printf
;;;156    					vTaskList((char *)&pcWriteBuffer);
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       vTaskList
;;;157    					printf("%s\r\n", pcWriteBuffer);
000024  a901              ADD      r1,sp,#4
000026  a023              ADR      r0,|L6.180|
000028  f7fffffe          BL       __2printf
;;;158    				
;;;159    					printf("\r\n任务名       运行计数         使用率\r\n");
00002c  a023              ADR      r0,|L6.188|
00002e  f7fffffe          BL       __2printf
;;;160    					vTaskGetRunTimeStats((char *)&pcWriteBuffer);
000032  a801              ADD      r0,sp,#4
000034  f7fffffe          BL       vTaskGetRunTimeStats
;;;161    					printf("%s\r\n", pcWriteBuffer);
000038  a901              ADD      r1,sp,#4
00003a  a01e              ADR      r0,|L6.180|
00003c  f7fffffe          BL       __2printf
;;;162    					break;
000040  e000              B        |L6.68|
                  |L6.66|
;;;163    				
;;;164    				/* 其他的键值不处理 */
;;;165    				default:                     
;;;166    					break;
000042  bf00              NOP      
                  |L6.68|
000044  bf00              NOP                            ;162
                  |L6.70|
;;;167    			}
;;;168    		}
;;;169    		
;;;170    		vTaskDelay(20);
000046  2014              MOVS     r0,#0x14
000048  f7fffffe          BL       vTaskDelay
                  |L6.76|
00004c  e7da              B        |L6.4|
;;;171    	}
;;;172    }
;;;173    
                          ENDP

00004e  0000              DCW      0x0000
                  |L6.80|
000050  3d3d3d3d          DCB      "=================================================\r\n",0
000054  3d3d3d3d
000058  3d3d3d3d
00005c  3d3d3d3d
000060  3d3d3d3d
000064  3d3d3d3d
000068  3d3d3d3d
00006c  3d3d3d3d
000070  3d3d3d3d
000074  3d3d3d3d
000078  3d3d3d3d
00007c  3d3d3d3d
000080  3d0d0a00
                  |L6.132|
000084  c8cecef1          DCB      200,206,206,241,195,251,"      ",200,206,206,241,215,180
000088  c3fb2020
00008c  20202020
000090  c8cecef1
000094  d7b4    
000096  ccac20d3          DCB      204,172," ",211,197,207,200,188,182,"   ",202,163,211,224
00009a  c5cfc8bc
00009e  b6202020
0000a2  caa3d3e0
0000a6  d5bb20c8          DCB      213,187," ",200,206,206,241,208,242,186,197,"\r\n",0
0000aa  cecef1d0
0000ae  f2bac50d
0000b2  0a00    
                  |L6.180|
0000b4  25730d0a          DCB      "%s\r\n",0
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L6.188|
0000bc  0d0ac8ce          DCB      "\r\n",200,206,206,241,195,251,"       ",212,203,208,208
0000c0  cef1c3fb
0000c4  20202020
0000c8  202020d4
0000cc  cbd0d0  
0000cf  bcc6cafd          DCB      188,198,202,253,"         ",202,185,211,195,194,202,"\r\n"
0000d3  20202020
0000d7  20202020
0000db  20cab9d3
0000df  c3c2ca0d
0000e3  0a      
0000e4  00                DCB      0
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskUserIF
                          DCD      0x00000000
                  xHandleTaskLED
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xHandleTaskStart
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 128
|__asm___6_main_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
